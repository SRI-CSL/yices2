(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info
  :source |
SMT script generated by Ultimate LTL Automizer [1].
Ultimate LTL Automizer is a tool that checks if a C program satisfies an LTL 
property. The verification approch of Ultimate LTL Automizer is based on 
Buchi programs [2].

This SMT script belongs to a set of SMT scripts that was generated by applying
Ultimate LTL Automizer (revision r14204) to benchmarks that are mainly taken
from the RERS Challenge 2014 [3].

2015-05-01, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
       and  Vincent Langenfeld (langenfv@informatik.uni-freiburg.de)


[1] https://ultimate.informatik.uni-freiburg.de/ltlautomizer
[2] Daniel Dietsch, Matthias Heizmann, Vincent Langenfeld, and Andreas Podelski
Fairness Modulo Theory: A New Approach to LTL Software Model Checking
accepted at CAV 2015
[3] The RERS Challenge 2014 http://www.rers-challenge.org/2014Isola/


Made compatible to SMT-COMP rules by SMTInterpol
|)
(set-info :category "industrial")
(declare-fun |c_old(~a21)| () Int)
(declare-fun c_~a21 () Int)
(declare-fun c_~a21_primed () Int)
(declare-fun |c_old(~a15)| () Int)
(declare-fun c_~a15 () Int)
(declare-fun c_~a15_primed () Int)
(declare-fun |c_old(~a12)| () Int)
(declare-fun c_~a12 () Int)
(declare-fun c_~a12_primed () Int)
(declare-fun |c_old(~a24)| () Int)
(declare-fun c_~a24 () Int)
(declare-fun c_~a24_primed () Int)
(declare-fun |c_old(~input)| () Int)
(declare-fun c_~input () Int)
(declare-fun c_~input_primed () Int)
(declare-fun |c_old(~output)| () Int)
(declare-fun c_~output () Int)
(declare-fun c_~output_primed () Int)
(declare-fun |c_calculate_output_#in~input| () Int)
(declare-fun |c_calculate_output_#in~input_primed| () Int)
(declare-fun |c_calculate_output_#res| () Int)
(declare-fun |c_calculate_output_#res_primed| () Int)
(declare-fun c_calculate_output_~input () Int)
(declare-fun c_calculate_output_~input_primed () Int)
(declare-fun |c_main_#t~nondet0| () Int)
(declare-fun |c_main_#t~ret1| () Int)
(declare-fun |c_main_#t~ret1_primed| () Int)
(push 1)
(declare-fun v_~a21_1_const_1605021682 () Int)
(assert (let ((v_~a21_1 v_~a21_1_const_1605021682)) (= v_~a21_1 7)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~a15_1_const_1604998445 () Int)
(assert (let ((v_~a15_1 v_~a15_1_const_1604998445)) (= v_~a15_1 8)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~a12_1_const_1604984912 () Int)
(assert (let ((v_~a12_1 v_~a12_1_const_1604984912)) (= v_~a12_1 (- 49))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~a24_1_const_1605018703 () Int)
(assert (let ((v_~a24_1 v_~a24_1_const_1605018703)) (= v_~a24_1 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~input_1_const_882449320 () Int)
(assert (let ((v_~input_1 v_~input_1_const_882449320)) (= v_~input_1 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~output_1_const_1183446439 () Int)
(assert (let ((v_~output_1 v_~output_1_const_1183446439)) (= v_~output_1 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_calculate_output_~input_1_const_84781333 () Int)
(declare-fun |v_calculate_output_#in~input_1_const_-543230363| () Int)
(assert
 (let
 ((v_calculate_output_~input_1 v_calculate_output_~input_1_const_84781333)
  (|v_calculate_output_#in~input_1|
   |v_calculate_output_#in~input_1_const_-543230363|))
 (= v_calculate_output_~input_1 |v_calculate_output_#in~input_1|)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_~a12_2_const_1604984943 () Int)
(declare-fun v_~a24_2_const_1605018702 () Int)
(declare-fun v_~a15_2_const_1604998444 () Int)
(declare-fun v_~a21_2_const_1605021681 () Int)
(assert
 (let
 ((v_~a12_2 v_~a12_2_const_1604984943)
  (v_~a24_2 v_~a24_2_const_1605018702)
  (v_~a15_2 v_~a15_2_const_1604998444)
  (v_~a21_2 v_~a21_2_const_1605021681))
 (and (< 80 v_~a12_2) (= v_~a24_2 1) (= v_~a15_2 7) (= v_~a21_2 6))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert false)
(set-info :status unsat)
(check-sat)
