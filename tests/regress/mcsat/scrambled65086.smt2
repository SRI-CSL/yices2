(set-option :print-success false)
(set-option :produce-unsat-cores true)
(set-logic QF_NIA)
(declare-fun x33 () Int)
(declare-fun x17 () Int)
(declare-fun x20 () Int)
(declare-fun x22 () Int)
(declare-fun x25 () Int)
(declare-fun x5 () Int)
(declare-fun x27 () Int)
(declare-fun x3 () Int)
(declare-fun x10 () Int)
(declare-fun x36 () Int)
(declare-fun x26 () Int)
(declare-fun x30 () Int)
(declare-fun x34 () Int)
(declare-fun x42 () Int)
(declare-fun x9 () Int)
(declare-fun x23 () Int)
(declare-fun x32 () Int)
(declare-fun x43 () Int)
(declare-fun x1 () Int)
(declare-fun x37 () Int)
(declare-fun x2 () Int)
(declare-fun x39 () Int)
(declare-fun x11 () Int)
(declare-fun x4 () Int)
(declare-fun x7 () Int)
(declare-fun x15 () Int)
(declare-fun x13 () Int)
(declare-fun x35 () Int)
(declare-fun x46 () Int)
(declare-fun x14 () Int)
(declare-fun x19 () Int)
(declare-fun x24 () Int)
(declare-fun x21 () Int)
(declare-fun x18 () Int)
(declare-fun x16 () Int)
(declare-fun x12 () Int)
(declare-fun x41 () Int)
(declare-fun x28 () Int)
(declare-fun x29 () Int)
(declare-fun x44 () Int)
(declare-fun x8 () Int)
(declare-fun x40 () Int)
(declare-fun x31 () Int)
(declare-fun x45 () Int)
(declare-fun x38 () Int)
(declare-fun x6 () Int)
(assert (! (or (or (and (>= x29 0) (= 0 (+ (* (- 1) x32) (* x1 x20))) (<= 0 x26) (<= 0 x2) (> (+ (* 1 x2) 2 (* x38 x1) (* 2 x26) (* x30 2) (* x44 1) (* x32 2) (* 1 x29)) 0) (>= x32 0) (= 0 (+ (* x1 x19) (* 1 x29) (* x44 (- 1)) (* x8 (- 1)))) (<= 0 x1) (<= 0 x30) (= 0 (+ (* x2 (- 1)) (* x6 x1) (* x29 (- 1)) (- 1))) (= 0 (* x30 (- 1))) (= 0 (+ (* (- 1) x26) (* x1 x35))) (>= x44 0) (= (+ (* x1 x39) (* 1 x8)) 0)) (and (> (+ (* 2 x18) (* x38 x14) (* 2 x28) (* x10 1) (* 1 x43) (* 1 x21) (- 1) (* 2 x13)) 0) (= 0 (+ (* (- 1) x28) (* x14 x20))) (<= 0 x14) (= (+ (* x34 1) (* x39 x14)) 0) (<= 0 x21) (= 0 (* x18 (- 1))) (>= x18 0) (<= 0 x28) (= (+ (* (- 1) x13) (* x14 x35)) 0) (<= 0 x43) (<= 0 x10) (= 0 (+ (* x34 (- 1)) (* x21 (- 1)) (* x43 1) (* x14 x19))) (= (+ (* x43 (- 1)) (* (- 1) x10) (* x6 x14)) 0) (<= 0 x13))) (and false (and (= 0 (+ (* x45 (- 1)) x4)) (= (+ x27 (* x45 (- 1))) 0) (>= 0 (+ 1 (* x12 (- 1)))) (<= (+ (* (+ 0 (* 1 x19)) x9) (* x40 (+ 0 (* 1 x6))) (* (+ 0 (* x35 1)) x46) (* (+ x20 0) x11) (+ (+ (+ x38 (* x35 0)) (* x6 0)) (* x19 0)) (* (+ x39 0) x15)) 0) (= 0 (+ x15 (* (- 1) x9))) (>= 0 (+ x9 (* (- 1) x40) 1)) (<= (+ x42 (* x31 (- 1))) 0) (>= 0 (+ 2 (* (- 1) x11))) (<= (+ (* x46 (- 1)) 2) 0) (= (+ x40 (* (- 1) x27)) 0) (>= 0 (+ (* x16 (- 1)) 1)) (<= (+ 1 (* x9 (- 1))) 0) (not (<= (+ x40 (- 1)) 0))))) :named smtcomp1))
(assert (! (and (<= (- 1) x19) (>= 1 x20) (<= (- 1) x6) (>= 1 x39) (<= (- 1) x20) (>= 1 x6) (>= x35 (- 1)) (>= 1 x35) (>= x39 (- 1)) (<= x19 1)) :named smtcomp2))
(assert (! (and (<= (+ (* (- 1) x46) 2) 0) (<= (+ (* x15 (+ x39 0)) (* (+ (* 1 x6) 0) x40) (* x11 (+ x20 0)) (* (+ 0 (* x35 1)) x46) (* x9 (+ (* 1 x19) 0)) (+ (+ (+ x38 (* 0 x35)) (* 0 x6)) (* x19 0))) 0) (= 0 (+ (* (- 1) x9) x15)) (<= (+ (* x16 (- 1)) 1) 0) (>= 0 (+ 1 (* (- 1) x9))) (<= (+ (* (- 1) x31) x42) 0) (>= 0 (+ 2 (* (- 1) x11))) (= 0 (+ (* (- 1) x27) x40)) (<= (+ x9 1 (* (- 1) x40)) 0) (= (+ (* (- 1) x45) x4) 0) (= (+ (* (- 1) x45) x27) 0) (>= 0 (+ 1 (* (- 1) x12))) (not (<= (+ (- 1) x40) 0))) :named smtcomp3))
(check-sat)
(get-unsat-core)
(exit)
