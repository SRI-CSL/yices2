(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 12) (_ BitVec 15) (_ BitVec 10)) (_ BitVec 9))
(declare-fun p0 ( (_ BitVec 11) (_ BitVec 5)) Bool)
(declare-fun p1 ( (_ BitVec 10) (_ BitVec 3)) Bool)
(declare-fun v0 () (_ BitVec 6))
(assert (let ((e1(_ bv3 2)))
(let ((e2(_ bv1753 13)))
(let ((e3 (! (f0 ((_ zero_extend 10) e1) ((_ sign_extend 13) e1) ((_ zero_extend 4) v0)) :named term3)))
(let ((e4 (! (ite (p0 ((_ zero_extend 2) e3) ((_ extract 4 0) e3)) (_ bv1 1) (_ bv0 1)) :named term4)))
(let ((e5 (! (ite (p1 ((_ zero_extend 8) e1) ((_ extract 2 0) v0)) (_ bv1 1) (_ bv0 1)) :named term5)))
(let ((e6 (! (ite (= (_ bv1 1) ((_ extract 0 0) e5)) e1 ((_ zero_extend 1) e5)) :named term6)))
(let ((e7 (! (bvlshr e1 ((_ sign_extend 1) e5)) :named term7)))
(let ((e8 (! (ite (bvule ((_ sign_extend 4) e7) v0) (_ bv1 1) (_ bv0 1)) :named term8)))
(let ((e9 (! (bvnor v0 ((_ zero_extend 4) e6)) :named term9)))
(let ((e10 (! (bvxor ((_ zero_extend 11) e7) e2) :named term10)))
(let ((e11 (! (bvsgt ((_ sign_extend 12) e5) e2) :named term11)))
(let ((e12 (! (bvule e9 ((_ zero_extend 5) e5)) :named term12)))
(let ((e13 (! (p0 ((_ zero_extend 5) e9) ((_ sign_extend 3) e7)) :named term13)))
(let ((e14 (! (p0 ((_ sign_extend 10) e5) ((_ extract 6 2) e3)) :named term14)))
(let ((e15 (! (p0 ((_ extract 11 1) e2) ((_ sign_extend 3) e6)) :named term15)))
(let ((e16 (! (bvult e10 ((_ zero_extend 11) e1)) :named term16)))
(let ((e17 (! (p1 ((_ sign_extend 4) v0) ((_ extract 5 3) e9)) :named term17)))
(let ((e18 (! (bvuge e6 e6) :named term18)))
(let ((e19 (! (bvugt ((_ sign_extend 7) e6) e3) :named term19)))
(let ((e20 (! (p1 ((_ sign_extend 8) e7) ((_ sign_extend 2) e4)) :named term20)))
(let ((e21 (! (bvsle e1 e7) :named term21)))
(let ((e22 (! (distinct e9 ((_ zero_extend 4) e1)) :named term22)))
(let ((e23 (! (= e7 ((_ sign_extend 1) e8)) :named term23)))
(let ((e24 (! (ite e19 e12 e18) :named term24)))
(let ((e25 (! (=> e23 e17) :named term25)))
(let ((e26 (! (xor e11 e24) :named term26)))
(let ((e27 (! (xor e21 e21) :named term27)))
(let ((e28 (! (=> e16 e15) :named term28)))
(let ((e29 (! (= e22 e22) :named term29)))
(let ((e30 (! (= e28 e27) :named term30)))
(let ((e31 (! (xor e13 e25) :named term31)))
(let ((e32 (! (xor e30 e26) :named term32)))
(let ((e33 (! (and e32 e20) :named term33)))
(let ((e34 (! (not e31) :named term34)))
(let ((e35 (! (xor e29 e14) :named term35)))
(let ((e36 (! (and e33 e33) :named term36)))
(let ((e37 (! (= e36 e35) :named term37)))
(let ((e38 (! (=> e34 e37) :named term38)))
e38
)))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "NUL")
(get-model)
(get-value (term3))
(get-value (term4))
(get-value (term5))
(get-value (term6))
(get-value (term7))
(get-value (term8))
(get-value (term9))
(get-value (term10))
(get-value (term11))
(get-value (term12))
(get-value (term13))
(get-value (term14))
(get-value (term15))
(get-value (term16))
(get-value (term17))
(get-value (term18))
(get-value (term19))
(get-value (term20))
(get-value (term21))
(get-value (term22))
(get-value (term23))
(get-value (term24))
(get-value (term25))
(get-value (term26))
(get-value (term27))
(get-value (term28))
(get-value (term29))
(get-value (term30))
(get-value (term31))
(get-value (term32))
(get-value (term33))
(get-value (term34))
(get-value (term35))
(get-value (term36))
(get-value (term37))
(get-value (term38))
(get-info :all-statistics)
