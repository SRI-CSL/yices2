(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 2)) (_ BitVec 14))
(declare-fun p0 ( (_ BitVec 8)) Bool)
(declare-fun v0 () (_ BitVec 13))
(assert (let ((e1(_ bv2859 15)))
(let ((e2(_ bv1 3)))
(let ((e3 (! (bvsdiv ((_ sign_extend 2) v0) e1) :named term3)))
(let ((e4 (! (f0 ((_ extract 8 7) v0)) :named term4)))
(let ((e5 (! (bvcomp e3 e1) :named term5)))
(let ((e6 (! (ite (p0 ((_ extract 7 0) v0)) (_ bv1 1) (_ bv0 1)) :named term6)))
(let ((e7 (! ((_ sign_extend 0) e1) :named term7)))
(let ((e8 (! (bvudiv ((_ zero_extend 2) e5) e2) :named term8)))
(let ((e9 (! (bvsgt e1 e1) :named term9)))
(let ((e10 (! (p0 ((_ extract 8 1) v0)) :named term10)))
(let ((e11 (! (= e7 ((_ zero_extend 1) e4)) :named term11)))
(let ((e12 (! (bvsge e7 ((_ zero_extend 1) e4)) :named term12)))
(let ((e13 (! (bvult e5 e5) :named term13)))
(let ((e14 (! (distinct ((_ zero_extend 14) e5) e1) :named term14)))
(let ((e15 (! (bvslt e1 ((_ zero_extend 12) e2)) :named term15)))
(let ((e16 (! (bvuge e4 ((_ sign_extend 1) v0)) :named term16)))
(let ((e17 (! (bvsgt e1 ((_ zero_extend 12) e2)) :named term17)))
(let ((e18 (! (bvsge e3 ((_ sign_extend 14) e5)) :named term18)))
(let ((e19 (! (bvsgt ((_ sign_extend 11) e2) e4) :named term19)))
(let ((e20 (! (bvsle ((_ zero_extend 14) e5) e3) :named term20)))
(let ((e21 (! (distinct ((_ sign_extend 14) e5) e1) :named term21)))
(let ((e22 (! (bvule e3 e1) :named term22)))
(let ((e23 (! (= e4 ((_ zero_extend 11) e8)) :named term23)))
(let ((e24 (! (bvule v0 v0) :named term24)))
(let ((e25 (! (= ((_ sign_extend 14) e5) e3) :named term25)))
(let ((e26 (! (bvuge ((_ zero_extend 2) e6) e2) :named term26)))
(let ((e27 (! (ite e11 e15 e21) :named term27)))
(let ((e28 (! (not e18) :named term28)))
(let ((e29 (! (and e23 e22) :named term29)))
(let ((e30 (! (= e17 e9) :named term30)))
(let ((e31 (! (= e14 e12) :named term31)))
(let ((e32 (! (=> e29 e13) :named term32)))
(let ((e33 (! (and e19 e28) :named term33)))
(let ((e34 (! (xor e27 e30) :named term34)))
(let ((e35 (! (not e16) :named term35)))
(let ((e36 (! (= e25 e33) :named term36)))
(let ((e37 (! (not e32) :named term37)))
(let ((e38 (! (or e37 e34) :named term38)))
(let ((e39 (! (ite e38 e36 e26) :named term39)))
(let ((e40 (! (or e39 e35) :named term40)))
(let ((e41 (! (=> e31 e31) :named term41)))
(let ((e42 (! (xor e41 e40) :named term42)))
(let ((e43 (! (not e24) :named term43)))
(let ((e44 (! (= e43 e20) :named term44)))
(let ((e45 (! (not e44) :named term45)))
(let ((e46 (! (=> e10 e42) :named term46)))
(let ((e47 (! (xor e45 e45) :named term47)))
(let ((e48 (! (=> e47 e47) :named term48)))
(let ((e49 (! (=> e46 e48) :named term49)))
(let ((e50 (! (and e49 (not (= e2 (_ bv0 3)))) :named term50)))
(let ((e51 (! (and e50 (not (= e1 (_ bv0 15)))) :named term51)))
(let ((e52 (! (and e51 (not (= e1 (bvnot (_ bv0 15))))) :named term52)))
e52
)))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "NUL")
(get-model)
(get-value (term3))
(get-value (term4))
(get-value (term5))
(get-value (term6))
(get-value (term7))
(get-value (term8))
(get-value (term9))
(get-value (term10))
(get-value (term11))
(get-value (term12))
(get-value (term13))
(get-value (term14))
(get-value (term15))
(get-value (term16))
(get-value (term17))
(get-value (term18))
(get-value (term19))
(get-value (term20))
(get-value (term21))
(get-value (term22))
(get-value (term23))
(get-value (term24))
(get-value (term25))
(get-value (term26))
(get-value (term27))
(get-value (term28))
(get-value (term29))
(get-value (term30))
(get-value (term31))
(get-value (term32))
(get-value (term33))
(get-value (term34))
(get-value (term35))
(get-value (term36))
(get-value (term37))
(get-value (term38))
(get-value (term39))
(get-value (term40))
(get-value (term41))
(get-value (term42))
(get-value (term43))
(get-value (term44))
(get-value (term45))
(get-value (term46))
(get-value (term47))
(get-value (term48))
(get-value (term49))
(get-value (term50))
(get-value (term51))
(get-value (term52))
(get-info :all-statistics)
