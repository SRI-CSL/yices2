(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun v0 () (_ BitVec 6))
(declare-fun v1 () (_ BitVec 8))
(declare-fun v2 () (_ BitVec 8))
(declare-fun v3 () (_ BitVec 15))
(declare-fun v4 () (_ BitVec 4))
(assert (let ((e5(_ bv28 5)))
(let ((e6 (! (bvshl v3 ((_ zero_extend 11) v4)) :named term6)))
(let ((e7 (! (ite (bvsle ((_ sign_extend 4) v4) v2) (_ bv1 1) (_ bv0 1)) :named term7)))
(let ((e8 (! (bvnor v4 ((_ sign_extend 3) e7)) :named term8)))
(let ((e9 (! (ite (bvugt v3 ((_ zero_extend 10) e5)) (_ bv1 1) (_ bv0 1)) :named term9)))
(let ((e10 (! (ite (bvslt ((_ sign_extend 11) e8) v3) (_ bv1 1) (_ bv0 1)) :named term10)))
(let ((e11 (! (ite (bvuge ((_ zero_extend 7) e7) v1) (_ bv1 1) (_ bv0 1)) :named term11)))
(let ((e12 (! (ite (bvugt e10 e10) (_ bv1 1) (_ bv0 1)) :named term12)))
(let ((e13 (! (bvsrem v0 v0) :named term13)))
(let ((e14 (! (bvsle v4 ((_ zero_extend 3) e9)) :named term14)))
(let ((e15 (! (bvsgt ((_ zero_extend 14) e12) e6) :named term15)))
(let ((e16 (! (bvuge v0 ((_ sign_extend 5) e10)) :named term16)))
(let ((e17 (! (bvult ((_ zero_extend 7) e10) v2) :named term17)))
(let ((e18 (! (= v1 ((_ zero_extend 7) e11)) :named term18)))
(let ((e19 (! (bvslt v2 ((_ sign_extend 4) v4)) :named term19)))
(let ((e20 (! (bvsgt ((_ zero_extend 7) e11) v2) :named term20)))
(let ((e21 (! (distinct ((_ zero_extend 14) e7) v3) :named term21)))
(let ((e22 (! (bvslt e5 ((_ zero_extend 4) e9)) :named term22)))
(let ((e23 (! (bvslt ((_ sign_extend 5) e11) v0) :named term23)))
(let ((e24 (! (bvsgt v2 ((_ sign_extend 4) v4)) :named term24)))
(let ((e25 (! (bvuge e6 ((_ zero_extend 9) e13)) :named term25)))
(let ((e26 (! (bvsge e13 ((_ zero_extend 5) e7)) :named term26)))
(let ((e27 (! (distinct e8 ((_ zero_extend 3) e7)) :named term27)))
(let ((e28 (! (=> e19 e17) :named term28)))
(let ((e29 (! (not e14) :named term29)))
(let ((e30 (! (ite e16 e29 e23) :named term30)))
(let ((e31 (! (ite e24 e30 e15) :named term31)))
(let ((e32 (! (or e27 e26) :named term32)))
(let ((e33 (! (not e22) :named term33)))
(let ((e34 (! (ite e31 e31 e33) :named term34)))
(let ((e35 (! (ite e25 e21 e18) :named term35)))
(let ((e36 (! (not e32) :named term36)))
(let ((e37 (! (or e34 e28) :named term37)))
(let ((e38 (! (= e36 e20) :named term38)))
(let ((e39 (! (and e38 e37) :named term39)))
(let ((e40 (! (not e35) :named term40)))
(let ((e41 (! (and e39 e39) :named term41)))
(let ((e42 (! (and e40 e41) :named term42)))
(let ((e43 (! (and e42 (not (= v0 (_ bv0 6)))) :named term43)))
(let ((e44 (! (and e43 (not (= v0 (bvnot (_ bv0 6))))) :named term44)))
e44
)))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "NUL")
(get-model)
(get-value (term6))
(get-value (term7))
(get-value (term8))
(get-value (term9))
(get-value (term10))
(get-value (term11))
(get-value (term12))
(get-value (term13))
(get-value (term14))
(get-value (term15))
(get-value (term16))
(get-value (term17))
(get-value (term18))
(get-value (term19))
(get-value (term20))
(get-value (term21))
(get-value (term22))
(get-value (term23))
(get-value (term24))
(get-value (term25))
(get-value (term26))
(get-value (term27))
(get-value (term28))
(get-value (term29))
(get-value (term30))
(get-value (term31))
(get-value (term32))
(get-value (term33))
(get-value (term34))
(get-value (term35))
(get-value (term36))
(get-value (term37))
(get-value (term38))
(get-value (term39))
(get-value (term40))
(get-value (term41))
(get-value (term42))
(get-value (term43))
(get-value (term44))
(get-info :all-statistics)
